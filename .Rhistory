color = color
)))
}
funx(x)
fun1 <- function(df){
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
do.call(rbind, with(df, Map(expand.grid,
alpha = strsplit(alpha, ", "),
beta = strsplit(beta, ", "),
color = color
)))
}
fun1(x)
fun1 <- function(df){
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
do.call(rbind, with(df, Map(expand.grid,
alpha = strsplit(alpha, ", "),
beta = strsplit(beta, ", "),
color = color,
value = 1
)))
}
fun1(x)
x2 <- df[df$alpha==df$beta,]
x2
fun1(x2)
df<-data.frame(alpha=c(1, "1, 3", "2, 4", 2, 1, 3, "1, 2", 2),
beta=c("2, 4", "1, 3", 5, 3, 3, "1, 4", "1, 2", 4),
color=c("red", "yellow"))
df
x<-df[df$alpha!=df$beta,]
x
fun1(x)
x2 <- df[df$alpha==df$beta,]
x2
x2
x2 <- df[df$alpha==df$beta,]
df
x2 <- df[df$alpha==df$beta,]
df
df[df$alpha==df$beta,]
df[df$alpha1=df$beta,]
df[df$alpha!=df$beta,]
df<-data.frame(alpha=c(1, "1, 3", "2, 4", 2, 1, 3, "1, 2", 2),
beta=c("2, 4", "1, 3", 5, 3, 3, "1, 4", "1, 2", 4),
color=c("red", "yellow"))
df
str(df)
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
df[df$alpha!=df$beta,]
df[df$alpha==df$beta,]
x<-df[df$alpha!=df$beta,]
x
x2 <- df[df$alpha==df$beta,]
x2
df<-data.frame(alpha=c(1, "1, 3", "2, 4, 5", 2, 1, 3, "1, 2", "1, 2, 3"),
beta=c("2, 4", "1, 3", 5, 3, 3, "1, 4", "1, 2", "1, 2, 3"),
color=c("red", "yellow"))
df
str(df)
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
do.call(rbind, with(df, Map(expand.grid,
alpha = strsplit(alpha, ", "),
beta = strsplit(beta, ", "),
color = color
)))
x<-df[df$alpha!=df$beta,]
x
fun1(x)
x2 <- df[df$alpha==df$beta,]
x2
df<-data.frame(alpha=c(1, "3, 4", "2, 4, 5", 2, 1, 3, "1, 2", "1, 2, 3"),
beta=c("2, 4", "3, 4", 5, 3, 3, "1, 4", "1, 2", "1, 2, 3"),
color=c("red", "yellow"))
df
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
x<-df[df$alpha!=df$beta,]
x
fun1(x)
x2 <- df[df$alpha==df$beta,]
x2
strsplit(x2$alpha, ", ")
expand.grid(strsplit(x2$alpha, ", "), (strsplit(x2$alpha, ", "))
)
a<-(strsplit(x2$alpha, ", ")
a
a<-strsplit(x2$alpha, ", ")
a
expand.grid(a,a)
lapply(a, expand.grid)
lapply(a, function(x) expand.grid(x,x))
lapply(a, function(x) expand.grid(x))
lapply(a, function(x) expand.grid(x,x))
lapply(a, function(x) c(combn(x, 2, simplify=FALSE))
)
apply(a, function(x) c(combn(x, 2, simplify=FALSE)))
sapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
sapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
sapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
vapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
c(combn(a, 2, simplify=FALSE))
a
x2 <- df[df$alpha==df$beta,]
x2
a<-strsplit(x2$alpha, ", ")
a
lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
a.combs <- lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
a.combs[1]
a.combs[[1]]
a.combs[1]
a.combs[2]
a.combs[3]
unlist(a.combs)
data.frame=(unlist(a.combs), unlist(a.combs))
data.frame<-(unlist(a.combs), unlist(a.combs))
data.frame<-unlist(a.combs), unlist(a.combs)
data.frame(unlist(a.combs), unlist(a.combs))
data.frame(alpha=unlist(a.combs), beta=unlist(a.combs),score=0.5)
a.combs[1]
unlist(a.combs)
a.combs[3]
a.combs[1]
data.frame(a.combs[1])
cbind( (a.combs[1]), a.combs[2], a.combs[3])
cbind( unlist(a.combs[1]), unlist(a.combs[2]), unlist(a.combs[3]))
rbind( unlist(a.combs[1]), unlist(a.combs[2]), unlist(a.combs[3]))
do.call(a.combs)
do.call(rbind,a.combs)
do.call(cbind,a.combs)
do.call(as.character(cbind,a.combs))
do.call(rbind, with(a, Map(c(combn(x, 2, simplify=FALSE))
color = color,
value = 0.5
)
do.call(rbind, with(a, Map(c(combn(x, 2, simplify=FALSE))
color = color,
do.call(rbind, with(a, Map(c(combn(x, 2, simplify=FALSE)),
color = color,
value = 0.5
)
)
)
do.call(rbind, with(a, Map(function(x) c(combn(x, 2, simplify=FALSE)),
color = color,
value = 0.5
)))
do.call(rbind, with(a, Map(function(x) c(combn(x, 2, simplify=FALSE)))))
a.combs <- lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
a.combs
a
str(a)
unlist
unlist(a)
matrix(unlist(a),ncol=2)
matrix(unlist(a),ncol=2, byrow=T)
a
a.combs <- lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
a.combs
unlist(a.combs)
matrix(unlist(a.combs),ncol=2, byrow=T)
matrix(unlist(a.combs),ncol=2, byrow=T)
df
fun1(x)
df<-data.frame(alpha=c(1, "3, 4", "2, 4, 5", 2, 1, 3, "1, 2", "1, 2, 3"),
beta=c("2, 4", "3, 4", 1, 3, 3, "1, 4", "1, 2", "1, 2, 3"),
color=c("red", "yellow"))
df
x<-df[df$alpha!=df$beta,]
fun1(x)
x<-df[df$alpha!=df$beta,]
df<-data.frame(alpha=c(1, "3, 4", "2, 4, 5", 2, 1, 3, "1, 2", "1, 2, 3"),
beta=c("2, 4", "3, 4", 1, 3, 3, "1, 4", "1, 2", "1, 2, 3"),
color=c("red", "yellow"))
df
df$alpha<-as.character(df$alpha)
df$beta<-as.character(df$beta)
x<-df[df$alpha!=df$beta,]
x
fun1(x)
fun1(x)
x2 <- df[df$alpha==df$beta,]
x2
a<-strsplit(x2$alpha, ", ")
a.combs <- lapply(a, function(x) c(combn(x, 2, simplify=FALSE)))
matrix(unlist(a.combs),ncol=2, byrow=T)
x<-1:5
combn(x)
combn(x,2)
combn(x,2,simplify=F)
combn(x,2)
combn(x,2:5)
combn(x,3)
combn(x,seq_along(2:5))
combn(x,2)
permutation(x)
z<-is.vector
z
z<-vector
z
for (i in 1:5){
z<-combn(x,[i])
}
matrix(unlist(a.combs),ncol=2, byrow=T)
rm(list = ls(all = TRUE))  # clean global environment
setwd("C:/Users/curley/Dropbox/Work/R/teachingR/IntroR")
setwd("C:/Users/curley/Dropbox/Work/R/teachingR/IntroR")  #put your folder address here
df<-read.csv("wheels1.csv")
wheels1 <- read.csv("C:/Users/curley/Dropbox/Work/R/teachingR/IntroR/wheels1.csv")
View(wheels1)
head(df)
summary(df)
df$age
temp<-df$age  #just putting the 'age' variable into a vector called temp
mean(df$age)
mean(temp)
mean(df$age)
sd(df$age)
sd(temp)
var(df$age)
var(temp)
sd(temp)^2
sd(temp)*sd(temp)
var(df$age)
var(temp)
length(df$age)  #could use nrow(df$age) but makes more sense to use length
length(temp)
nrow(df$age)
nrow(df)
sem <- function(x) sqrt(var(x)/length(x))
sem1<-function(x){
sqrt(var(x)/length(x))
}
sem1<-function(x){
sqrt(var(x)/length(x))
}
sem(df$age)
sem(temp)
sem1(df$age)
sem1(temp)
min(df$total)
length(df$total, na.rm=T)
range(df$total, na.rm=T)
IQR (df$total, na.rm=T)
median (df$total, na.rm=T)
mad(df$total, na.rm=T) #the median absolute deviation.
quantile(df$total, c(0.25, 0.5, 0.75), type = 9, na.rm=T)   #look up help function for types
quantile(df$total, c(0.25, 0.5, 0.75), type = 5, na.rm=T)
quantile(df$total, c(0.25, 0.5, 0.75), type = 6, na.rm=T)
quantile(df$total, c(0.25, 0.5, 0.75), type = 7, na.rm=T)
library(psych)
describe(df)     # gives way more detail than summary() from base package
describe(df[c(3:6,12)])
df1<-df[c(3:6,12,13)]  # let's put all numerical data into a separate df
head(df1)
apply(df1,2,mean)  #apply runs a function (3rd argument) over a dataframe/matrix (1st argument)
apply(df1,2,sem)  # more on the NAs in a little bit
set.seed(88)
mat <- matrix(runif(100,0,100), 20, 5)
mat
mat
apply(mat, 2, function(x) x/sum(x)*100)  #e.g. getting percentages of each observation within each column
apply(mat,2,cumsum)  #getting cumulative scores across each row
df2 <- df1[c(1:4)]
head(df2)
apply(df2,1,mean)
df2$averagerevs <- apply(df2,1,mean)
head(df2)
apply(df2,1,sem)
colnames(df)
df3 <- df[c(1:6)]  # just making a new df to make it easier to see what we're doing
head(df3)
df3[,3:6]  #these are the columns/variables with our numerical data
apply(df3[,3:6] , 1, mean)
df3$mean <- apply(df3[,3:6] , 1, mean)
df3$sem  <- apply(df3[,3:6] , 1, sem)
df3$min  <- apply(df3[,3:6] , 1, min)
df3$max  <- apply(df3[,3:6] , 1, max)
head(df3)
apply(df3[,3:6] , 1, mean)
df3
df2
head(df2)
colors<-c("red", "blue")
df2$colors<-colors
head(df2)
colors<-c("red", "blue", "green")
df2$colors2<-colors
head(df)
library(dplyr)
df %>%
group_by(strain) %>%
summarise(mean(day1), mean(day2), mean(day3), mean(day4), mean(total))
df %>%
group_by(strain) %>%
summarise(mean(day1), mean(day2), mean(day3), mean(day4, na.rm=T), mean(total, na.rm=T))
df %>%
group_by(strain) %>%
summarise(M1=mean(day1), M2=mean(day2), M3=mean(day3), M4=mean(day4, na.rm=T), MTOT=mean(total, na.rm=T))
df %>%
group_by(strain) %>%
summarise(mean=mean(total, na.rm=T), sd=sd(total, na.rm=T), sem=sem(total), count = n())
sem <- function(x) sqrt((var(x), na.rm=T)/length(x))
sem <- function(x) sqrt((var(x) na.rm=T)/length(x))
sem <- function(x) sqrt(var(x, na.rm=T)/length(x))
df %>%
group_by(strain) %>%
summarise(mean=mean(total, na.rm=T), sd=sd(total, na.rm=T), sem=sem(total), count = n())
newdf<-read.csv("parity.csv")   # let's load a different dataset
parity <- read.csv("C:/Users/curley/Dropbox/Work/R/teachingR/IntroR/parity.csv")
View(parity)
head(newdf)
tail(newdf)
str(newdf)
sem_new <- function(x) sqrt(var(x, na.rm=T)/length(x))
newdf %>%
group_by(parity,sex) %>%
summarise(mean=mean(latency, na.rm=T), sd=sd(latency, na.rm=T), sem=sem_new(latency), count = n())
newdf %>%
group_by(sex,parity) %>%
summarise(mean=mean(total, na.rm=T), sd=sd(total, na.rm=T), sem=sem_new(total), count = n())
newdf %>%
group_by(sex,parity) %>%
summarise_each(funs(mean=mean(., na.rm=TRUE)),latency,min1,total)
newdf %>%
group_by(sex,parity) %>%
summarise_each(funs(vvv=mean(., na.rm=TRUE)),latency,min1,total)
newdf %>%
group_by(sex,parity) %>%
summarise_each(funs(mean(., na.rm=TRUE)),latency,min1,total)
newdf %>%
group_by(sex,parity) %>%
tally
newdf %>%
group_by(sex,parity) %>%
tally %>%
left_join(newdf)
newdf %>%
group_by(sex,parity) %>%
tally %>%
left_join(newdf) %>%
group_by(sex,parity,n)%>%
summarise_each(funs(mean=mean(., na.rm=TRUE)),latency,min1,total)
head(newdf)
colnames(newdf)
newdf[,5:7]
aggregate(newdf[,5:7], by=list(newdf$sex,newdf$parity), FUN=mean, na.rm=T)
aggregate(newdf[,5:7], by=list(newdf$sex,newdf$parity), FUN=sd, na.rm=T)
aggregate(newdf[,5:7], by=list(newdf$sex,newdf$parity), FUN=sem_new)
aggregate(newdf[,5:7], by=list(newdf$sex,newdf$parity), FUN=max, na.rm=T)
aggregate(newdf[,5:7], by=list(sex=newdf$sex,parity=newdf$parity), FUN=sd, na.rm=T)
x <- aggregate(newdf[,5:7], by=list(sex=newdf$sex,parity=newdf$parity), FUN=mean, na.rm=T)
x
round(x[,3:5], digits=2)
library(data.table)      # this may be a package worth knowing about if your data has 1000s of rows/columns - SUPER FAST !
dt <- as.data.table(newdf)
dt
dt[,list(totalmedian=median(total)),by=sex]
dt[,list(totalmedian=median(total)),by=list(sex,parity)]
dt[,list(mean=mean(total), median=median(total)),by=list(sex,parity)]
dt[,list(mean=mean(total),
median=median(total),
sd=sd(total),
sem=sem_new(total) ),
by=list(sex,parity)]
library(ggplot2)
###Some themes I've generated
library(ggplot2)
theme1<-theme(panel.background = element_rect(fill='transparent'),
panel.grid.minor = element_line(color='transparent'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
axis.line = element_line(size = 0.5, color = "antiquewhite2"),
panel.grid.major = element_line(colour = "antiquewhite2"),
panel.grid.minor = element_blank())
theme2<-theme(panel.background = element_rect(fill='transparent'),
panel.grid.minor = element_line(color='transparent'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
plot.title = element_text(size=24),
axis.line = element_line(size = 0.5, color = "gray39"),
strip.text = element_text(color = 'black', size = 15),
panel.grid.major = element_line(colour = "gray99"),
panel.grid.minor = element_blank())
theme3<-theme(panel.background = element_rect(fill='transparent'),
panel.grid.minor = element_line(color='transparent'),
axis.text = element_text (size=30, color="grey11"),
axis.title = element_text(color = 'grey11', size = 30),
axis.line = element_line(size = 0.5, color = "gray47"),
legend.text = element_text (size=20, color="grey11"),
panel.grid.major = element_line(colour = "white"))
theme4<-theme(panel.background = element_rect(fill='gray90'),
panel.grid.minor = element_line(color='white'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
strip.text = element_text(size=30),
axis.line = element_line(size = 0.5, color = "gray47"),
panel.grid.major = element_line(colour = "white"))
theme5<-theme(panel.background = element_rect(fill='khaki1'),
panel.grid.minor = element_line(color='white'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
axis.line = element_line(size = 0.5, color = "gray47"),
panel.grid.major = element_line(colour = "white"))
theme5a<-theme(panel.background = element_rect(fill='whitesmoke'),
panel.grid.minor = element_line(color='white'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
axis.line = element_line(size = 0.5, color = "gray47"),
panel.grid.major = element_line(colour = "white"))
###Make a theme that contains better trend line aesthetics
theme6<-theme(panel.background = element_rect(fill='lavenderblush'),
panel.grid.minor = element_line(color='white'),
axis.text = element_text (size=15, color="grey11"),
axis.title = element_text(color = 'grey11', size = 20),
axis.line = element_line(size = 0.5, color = "gray47"),
panel.grid.major = element_line(colour = "white"))
theme7<-theme(panel.background = element_rect(fill='whitesmoke'),
panel.grid.minor = element_line(color='white'),
axis.text = element_text (size=20, color="grey11"),
axis.title = element_text(color = 'grey11', size = 25),
axis.line = element_line(size = 0.5, color = "gray47"),
panel.grid.major = element_line(colour = "white"))
library(HSAUR); foster ## e.g. "foster" dataset in HSAUR package (need to install)
install.packages("HSAUR")
library(HSAUR); foster ## e.g. "foster" dataset in HSAUR package (need to install)
?foster # tells you about the dataset
str(foster) #structure of foster dataset
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot()                                # plot it as a boxplot
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot(aes(fill = factor(litgen)))          # plot it as a boxplot and add color by litter genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot(aes(fill = factor(motgen)))       # for each litter genotype, show different boxplots by mother's genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot() + facet_grid(. ~ motgen)        # facet/split graphs by mother's genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot(aes(fill = factor(litgen))) +     # adding color by litter genotype
facet_grid(. ~ motgen)                           # facet/split graphs by mother's genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_boxplot(aes(fill = factor(litgen))) +     # adding color by litter genotype
facet_grid(. ~ motgen) + theme5a                          # facet/split graphs by mother's genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_point(size=7) +                           # add the data points at size = 7
geom_boxplot(alpha=0.15)                           # add the boxplot at alpha/transparency = 0.15 (between 0 and 1, lower number = more transparent)
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_point(size=5) +                           # add the data points at size = 5
geom_boxplot(alpha=0.15) +                           # add the boxplot at alpha/transparency = 0.15 (between 0 and 1, lower number = more transparent)
facet_grid(. ~ motgen)                           # facet/split graphs by mother's genotype
p <- ggplot(foster, aes(factor(litgen), weight))   # plot litter genotype on x-axis, weight on y-axis
p + geom_point(aes(color=litgen), size=5) +        # color data points by litter genotype # add the data points at size = 5
geom_boxplot(aes(fill = factor(litgen)),         #color boxplots by litter genotype
alpha=0.15) +                           # add the boxplot at alpha/transparency = 0.15
facet_grid(. ~ motgen)                           # facet/split graphs by mother's genotype
p <- ggplot(foster, aes(litgen, weight))   # plot litter genotype on x-axis, weight on y-axis
q <- p + geom_point(aes(color=litgen), size=5) +        # color data points by litter genotype # add the data points at size = 5
geom_boxplot(aes(fill = litgen),         #color boxplots by litter genotype
alpha=0.15) +                           # add the boxplot at alpha/transparency = 0.15
facet_grid(. ~ motgen)                           # facet/split graphs by mother's genotype
q
q + geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
q + geom_smooth(method = "loess", se=FALSE, color="black", aes(group=1))
q + theme7 + xlab("litter genotype") + ylab("litter weight")
primates <- read.csv("C:/Users/curley/Dropbox/Work/Statistics/James/R stuff for Rahia/primates.csv")
View(primates)
str(primates)  #take a look at how the dataset is structured
ggplot(primates, aes(x=bodymassM, y=bodymassF)) +  # simple scatterplot of 2 continuous variables
geom_point(shape=16, size=3)                     # e.g. looking at body mass Males vs body mass Females
ggplot(primates, aes(x=bodymassM, y=bodymassF)) +
geom_point(shape=8, size=3)                     # e.g. making the shape a star
streps <- primates[ which(primates$Suborder=='Strepsirrhini'), ]
ggplot(streps, aes(x=bodymassM, y=bodymassF)) +   # changed the df to 'streps'
geom_point(shape=15, color="red", size=3)                     # changing color and shape of points
summary(streps$Family)  #there are 8 different Family groups
ggplot(streps, aes(x=bodymassM, y=bodymassF)) +
geom_point(aes(colour = factor(Family)), size = 4)  # use a different color for members of different groups in Family
cerco <- primates[ which(primates$Family=='Cercopithecidae'), ]
cerco #look at the data
library(reshape2)
dataM<- cerco[c(3,4,6)] #keep species name, male brain volume, male body mass
dataF<- cerco[c(3,5,7)] #keep species name, female brain volume, female body mass
dataM$sex<-"male" # add 'male' to 'sex' column in dataset
dataF$sex<-"female" # add 'female' to 'sex' column in dataset
colnames(dataM)<-c("species", "brainvol", "bodymass", "sex") #changing column names
colnames(dataF)<-c("species", "brainvol", "bodymass", "sex") #changing column names
cercodf<-rbind(dataM,dataF) #recombine male and female data into longform table
cercodf # take a look at the data
ggplot(cercodf, aes(x=bodymass, y=brainvol)) +
geom_point(aes(colour = factor(sex)), size = 4)  #look at relationship between bodymass and brainvol by Sex
ggplot(cercodf, aes(x=log(bodymass), y=brainvol)) +
geom_point(aes(colour = factor(sex)), size = 4)  #look at relationship between bodymass and brainvol by Sex
p<-ggplot(cercodf, aes(x=bodymass, y=brainvol)) +
geom_point(aes(colour = factor(sex)), size = 4) +
theme2 +
xlab("Body Mass (g)") +
ylab("Brain volume (ml)")
p
p + stat_smooth(method=lm, aes(fill = factor(sex), color=factor(sex)))
p<-ggplot(cercodf, aes(x=log(bodymass), y=brainvol)) +          # have put log(bodymass) here
geom_point(aes(colour = factor(sex)), size = 4) +
theme2 +
xlab("Log of Body Mass") +
ylab("Brain volume (ml)") +
stat_smooth(method=lm, aes(fill = factor(sex), color=factor(sex)))
p
